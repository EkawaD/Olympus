// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// *** Auth
model User {
  id Int @id @default(autoincrement())

  email String  @unique
  hash  String?

  profil Profil?
  anon   Anon?
}

model Group {
  id Int @id @default(autoincrement())

  name String @unique

  anons        Anon[]
  transactions Transaction[]
  todos        CategoryTodo[]
  recipes      Recipe[]
  products     Product[]
  // invitations  Invitation[]
}

model Anon {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  groups Group[]

  pseudo String @default("pseudo")
  avatar String @default("/avatar.jpg")
  // invitations Invitation[]
}

//*** Notif 

// enum Status {
//   Pending
//   Accepted
//   Declined
// }

// model Invitation {
//   id Int @id @default(autoincrement())

//   group   Group @relation(fields: [groupId], references: [id])
//   groupId Int

//   destinataire Anon @relation(fields: [anonId], references: [id])
//   anonId       Int

//   status Status
// }

// *** Ceres

enum Meal {
  MondayNoon
  MondayEvening
  TuesdayNoon
  TuesdayEvening
  WednesdayNoon
  WednesdayEvening
  ThursdayNoon
  ThursdayEvening
  FridayNoon
  FridayEvening
  SaturdayNoon
  SaturdayEvening
  SundayNoon
  SundayEvening
}

model Recipe {
  id      Int    @id @default(autoincrement())
  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  name  String @unique
  tasks String

  time        String
  hint        String
  servings    Int          @default(4)
  image       String       @default("/default_recipe.jpg")
  meal        Meal?        @unique
  ingredients Ingredient[]
}

model Product {
  id      Int    @id @default(autoincrement())
  group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?

  name        String       @unique
  stock       Int          @default(0)
  toBuy       Int          @default(0)
  ingredients Ingredient[]
}

model Ingredient {
  id Int @id @default(autoincrement())

  needed Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
  recipe    Recipe  @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  recipeId  Int
}

// *** Heracles
model CategoryTodo {
  id Int @id @default(autoincrement())

  name  String
  todos Todo[]

  Group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?
}

model Todo {
  id Int @id @default(autoincrement())

  task      String
  completed Boolean @default(false)

  category       CategoryTodo @relation(fields: [categoryTodoId], references: [id], onDelete: Cascade)
  categoryTodoId Int
}

// *** Midas
model Transaction {
  id Int @id @default(autoincrement())

  name      String
  createdAt DateTime @default(now())
  amount    Float
  payee     String
  payer     String

  Group   Group? @relation(fields: [groupId], references: [id])
  groupId Int?
}

// *** Hermes

model Profil {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  avatar    String  @default("/avatar.jpg")
  color     String  @default("#008080")
  name      String  @default("Nom")
  firstname String  @default("Pr√©nom")
  address   String  @default("Chez moi")
  intro     String  @default("Bienvenue sur mon CV")
  website   String?
  tel       String?
  mail      String?
  linkedin  String?
  github    String?

  lettres     Lettre[]
  refs        Ref[]
  diplomes    Diplome[]
  experiences Experience[]
  projects    Project[]
  skills      Skill[]
  hobbies     Hobby[]
}

model Lettre {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  title   String
  content String
  objet   String?
}

model Ref {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  file String
}

model Diplome {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  title       String
  diplomaDate DateTime?
  school      String
  place       String?
  description String?
}

model Experience {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  entreprise  String
  poste       String
  place       String?
  description String?
  startDate   DateTime?
  endDate     DateTime?
}

model Project {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  image       String
  title       String
  description String
  github      String?
  demo        String?
  tags        String[] @default([""])
}

model Skill {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  skill String
  tech  Boolean @default(false)
}

model Hobby {
  id Int @id @default(autoincrement())

  profil   Profil? @relation(fields: [profilId], references: [id], onDelete: Cascade)
  profilId Int?

  name String
}
